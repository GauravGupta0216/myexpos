[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13] = SP;
alias userSP R4;
userSP = SP;
SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;

alias syscall R5;
syscall = [[PTBR+2*((userSP-5)/512)]*512 + ((userSP-5)%512)];

alias semID R6;
semID = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];

alias userareapage R7;
userareapage = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 11];

alias semidx R8;
semidx = [userareapage*512 + 496 + semID*2 + 1];

//SEMLOCK SYSTEM CALL
if(syscall == 19) then
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 19;

	if((semID<0) || (semID>7) || ([userareapage*512 + 496 + 2*semID] != 1)) then        //Invalid SemID OR Entry
		[[PTBR+2*((userSP-1)/512)]*512+((userSP-1)%512)] = -1;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;
		SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
		ireturn;
	endif;

	while([SEMAPHORE_TABLE + 4*semidx] != -1) do            //Semaphore is locked
		[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 4] = WAIT_SEMAPHORE;
		[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 5] = semidx;

		backup;
		call SCHEDULER;
		restore;
	endwhile;

	[SEMAPHORE_TABLE + 4*semidx] = [SYSTEM_STATUS_TABLE + 1];

	[[PTBR+2*((userSP-1)/512)]*512+((userSP-1)%512)] = 0;
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;
	SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
	ireturn;
endif;


//SEMUNLOCK SYSTEM CALL
if(syscall == 20) then
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 20;

	if((semID<0) || (semID>7) || ([userareapage*512 + 496 + 2*semID] != 1)) then        //Invalid SemID OR Entry
		[[PTBR+2*((userSP-1)/512)]*512+((userSP-1)%512)] = -1;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;
		SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
		ireturn;
	endif;

	if([SEMAPHORE_TABLE + 4*semidx] != -1) then         //If Semaphore is Locked
		if([SEMAPHORE_TABLE + 4*semidx] != [SYSTEM_STATUS_TABLE + 1]) then              //return -2
			[[PTBR+2*((userSP-1)/512)]*512+((userSP-1)%512)] = -2;
			[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;
			SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
			ireturn;
		endif;

		[SEMAPHORE_TABLE + 4*semidx] = -1;
		alias i R9;
		i = 0;
		while(i < 16) do
			if([PROCESS_TABLE+16*i+4]==WAIT_SEMAPHORE && [PROCESS_TABLE+16*i+5]==semidx) then
				[PROCESS_TABLE+16*i+4] = READY;
			endif;
			i = i + 1;
		endwhile;
	endif;

	[[PTBR+2*((userSP-1)/512)]*512+((userSP-1)%512)] = 0;
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;
	SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
	ireturn;
endif;

SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
ireturn;
