//-----------------------------BOOT MODULE------------------------//

//load exception handler
loadi(2, 15);
loadi(3, 16);

//load timer interrupt routine
loadi(4, 17);
loadi(5, 18);

//load disk interrupt
loadi(6,19);
loadi(7,20);

//load Console Interrupt Routine
loadi(8,21);
loadi(9,22);

//load INT4 CREATE AND DELETE FILE
loadi(10,23);
loadi(11,24);

//load INT5 OPEN AND CLOSE FILE
loadi(12,25);
loadi(13,26);

//load INT6 READ
loadi(14,27);
loadi(15,28);

//load INT7 WRITE
loadi(16,29);
loadi(17,30);

//load INT8 FORK
loadi(18,31);
loadi(19,32);

//load INT9 EXEC
loadi(20,33);
loadi(21,34);

//load INT10 EXIT
loadi(22, 35);
loadi(23, 36);

//load INT11 WAIT SIGNAL GETPID GETPPID
loadi(24, 37);
loadi(25, 38);

//load INT13 SEMGET AND SEMRELEASE
loadi(28, 41);
loadi(29, 42);

//load INT14 SEMLOCK AND SEMUNLOCK
loadi(30, 43);
loadi(31, 44);

//load INT15 SHUTDOWN
loadi(32, 45);
loadi(33, 46);

//load module 0 RESOURCE_MANAGER
loadi(40,53);
loadi(41,54);

//load module 1 PROCESS_MANAGER
loadi(42,55);
loadi(43,56);

//load module 2 MEMORY_MANAGER
loadi(44,57);
loadi(45,58);

//load module 3 FILE MANAGER
loadi(46,59);
loadi(47,60);

//load module 4 DEVICE_MANAGER
loadi(48,61);
loadi(49,62);

//load module 5 SCHEDULER
loadi(50,63);
loadi(51,64);

//load inode table
loadi(59,3);
loadi(60,4);

//load disk free list
loadi(61,2);

//load root file
loadi(62,5);

//load library code
loadi(63, 13);
loadi(64, 14);

//load init program
loadi(65, 7);
loadi(66, 8);

[TERMINAL_STATUS_TABLE] = 0;  //setting terminal as free initially
[DISK_STATUS_TABLE] = 0;

//Initialisiing mem free list.
alias iter R1;
iter = 0;
while(iter < 128) do
	if(iter < 83) then
		[MEMORY_FREE_LIST + iter] = 1;
	else
		[MEMORY_FREE_LIST + iter] = 0;
	endif;
	iter = iter + 1;
endwhile;

//Setting WAIT_MEM_COUNT to 0 and MEM_FREE_COUNT.
[SYSTEM_STATUS_TABLE + 3] = 0;
[SYSTEM_STATUS_TABLE + 2] = 127-82;


//-----------------------------------INIT_PROCESS----------------------------------//

//page table entries for init process
PTBR = PAGE_TABLE_BASE + 20;
PTLR=10;

//library
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

//heap
[PTBR+4]=78;
[PTBR+5]="0110";
[PTBR+6]=79;
[PTBR+7]="0110";

//code
[PTBR+8]=65;
[PTBR+9]="0100";
[PTBR+10]=66;
[PTBR+11]="0100";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";

//stack
[PTBR+16]=76;
[PTBR+17]="0110";
[PTBR+18]=77;
[PTBR+19]="0110";

//process table entries for init process
[PROCESS_TABLE + 16 + 1] = 1;
[PROCESS_TABLE + 16 + 3] = 1;                                      //USER ID of Root
[PROCESS_TABLE + 16 + 4] = CREATED;
[PROCESS_TABLE + 16 + 11] = 80;
[PROCESS_TABLE + 16 + 12] = 0;
[PROCESS_TABLE + 16 + 13] = 8*512;
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;
[PROCESS_TABLE + 16 + 15] = 10;

//-------------------PER PROCESS RESOURCE TABLE---------------------//
alias userAreaPage R0;
userAreaPage = [PROCESS_TABLE + 16 + 11];
iter = 0;
while(iter < 8)do
	[userAreaPage*512 + 496 + iter*2] = -1;
	iter = iter + 1;
endwhile;

//--------------------------DISK MAP TABLE---------------------------//
iter = 0;
while(iter < 10)do
	[DISK_MAP_TABLE + 10 + iter] = -1;
	iter = iter + 1;
endwhile;
[DISK_MAP_TABLE + 10 + 4] = 7;
[DISK_MAP_TABLE + 10 + 5] = 8;


//-------------------------SEMAPHORE TABLE----------------------------//
iter = 0;
while(iter < MAX_SEM_COUNT) do
	[SEMAPHORE_TABLE + 4*iter + 0] = -1;
	[SEMAPHORE_TABLE + 4*iter + 1] = 0;
	iter = iter + 1;
endwhile;

//--------------------------FILE STATUS TABLE-------------------------//
iter = 0;
while(iter < MAX_FILE_NUM) do
	[FILE_STATUS_TABLE + 4*iter + 0] = -1;
	[FILE_STATUS_TABLE + 4*iter + 1] = -1;
	iter = iter + 1;
endwhile;

//---------------------------BUFFER TABLE-----------------------------//
iter = 0;
while(iter < MAX_BUFFER) do
	[BUFFER_TABLE + 4*iter + 0] = -1;
	[BUFFER_TABLE + 4*iter + 1] = 0;
	[BUFFER_TABLE + 4*iter + 2] = -1;
	iter = iter + 1;
endwhile;

//------------------------OPEN FILE TABLE------------------------------//
iter = 0;
while(iter < MAX_OPENFILE_NUM) do
	[OPEN_FILE_TABLE + 4*iter + 0] = -1;
	[OPEN_FILE_TABLE + 4*iter + 1] = 0;
	iter = iter + 1;
endwhile;

//Saving entry point to top of user stack
[76*512] = [65*512 + 1];

//all other processes initially terminated
alias count R0;
count = 2;
while(count < 16) do
	[PROCESS_TABLE + count*16 + 4] = TERMINATED;
	count = count + 1;
endwhile;
return;
