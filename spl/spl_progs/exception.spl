//-------------------------------EXCEPTION HANDLER--------------------------------//

//Setting mode flag to -1;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = -1;

//saving the value of SP to UPTR field of user table.
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 13] = SP;

alias userSP R0;
//Setting up SP to begining of kernel stack.
SP = ([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 11]*512) - 1;

backup;
multipush(EIP);

//If exception cause is not page fault or if Stack is full.
if(EC!=0)then
  	if (EC == 1) then
    		print "Ill. Inst";
  	endif;
  	if (EC == 2) then
    		print "Ill Mem Ac";
  	endif;
  	if (EC == 3) then
  	 	print "Arith. Ex.";
  	endif;
	multipush(R0,EC,EPN,EMA,EIP);
	R1 = EXIT_PROCESS;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call PROCESS_MANAGER;
	multipop(R0,EC,EPN,EMA,EIP);

	multipush(R0,EC,EPN,EMA,EIP);
	call SCHEDULER;
	multipop(R0,EC,EPN,EMA,EIP);
	//There is no return to this process
endif;

//If exception is page fault.
if ((EPN==2) || (EPN==3)) then
  	alias pageNum1 R5;
  	alias pageNum2 R6;
  	// Getting free page for heap
  	multipush(R0,EC,EPN,EMA,EIP);
  	R1 = 1;
  	call MOD_2;
  	pageNum1 = R0;
  	multipop(R0,EC,EPN,EMA,EIP);

  	multipush(R0, R5,EC,EPN,EMA,EIP);
  	R1 = 1;
  	call MOD_2;
  	pageNum2 = R0;
 	multipop(R0, R5,EC,EPN,EMA,EIP);

  	//Updating page table
  	[PTBR + 4] = pageNum1;
  	[PTBR + 5] = "1110";
  	[PTBR + 6] = pageNum2;
  	[PTBR + 7] = "1110";
endif;


//If page corresponds to code page
if( (EPN >= 4) && (EPN<=7) ) then
  	alias diskBlockNum R1;
  	alias pageNum R5;
  	diskBlockNum = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + EPN];
  	//Calling Get code page
  	multipush(R0, R1,EC,EPN,EMA,EIP);
  	R2 = diskBlockNum;
  	R1=5;
  	R3 = [SYSTEM_STATUS_TABLE + 1];
  	call MOD_2;
 	pageNum = R0;
  	multipop(R0, R1,EC,EPN,EMA,EIP);

  	//Updating page table entry
  	[PTBR + EPN*2] = pageNum;
 	[PTBR + EPN*2 + 1] = "1100";
endif;


multipop(EIP);
restore;

//Resetting mode flag to 0;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
SP = SP + 1;
[ [PTBR+2*(SP/512)]*512 + (SP%512) ] = EIP;
ireturn;
