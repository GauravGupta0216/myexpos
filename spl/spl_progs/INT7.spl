//Set the MODE FLAG field in Process Table to System Call
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 5;

//Store value of user SP in register
alias userSP R1;
userSP = SP;

//Save the value of SP in UTPR of process table
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13] = SP;

//Set the value of SP to beginning of the Kernel Stack
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 11]*512 - 1;

alias fileDesc R2;
fileDesc = [[PTBR + 2*(userSP - 4)/512]*512 + (userSP-4)%512];

//return address
alias RetVal R3;
RetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP -1)%512);

alias word R4;
word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];

if(fileDesc != -2) then
	alias curr_pid R5;
	curr_pid = [SYSTEM_STATUS_TABLE + 1];

	alias userAreaPage R11;
	userAreaPage = [PROCESS_TABLE + curr_pid*16 + 11];

	if(fileDesc<0 || fileDesc>=8 || [userAreaPage*512 + 496 + 2*fileDesc] != FILE) then
		[RetVal] = -1;	//return -1
		[PROCESS_TABLE+curr_pid*16+9] = 0;	//reset the mode flag
		SP = userSP;
		ireturn;
	endif;

	alias open_ft_idx R12;
	open_ft_idx = [userAreaPage*512 + 496 + 2*fileDesc + 1];

	alias inode_idx R13;
	inode_idx = [OPEN_FILE_TABLE + 4*open_ft_idx];

	alias curr_userID R6;
	curr_userID = [PROCESS_TABLE + curr_pid*16 + 3];
	if([INODE_TABLE + 16*inode_idx + 4] == 0)	then//if exclusive permission is set
		if([INODE_TABLE + 16*inode_idx + 3] != curr_userID && curr_userID != 1) then
			[PROCESS_TABLE + curr_pid*16 + 9] = 0;	
			[RetVal] = -3; 
			SP = userSP;	
			ireturn;	
		endif;
	endif;

	multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);
	R1 = ACQUIRE_INODE;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = inode_idx;
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);

	//if acquire inode fails then return -1
	if(R0 == -1) then
		[RetVal] = -1;	
		[PROCESS_TABLE+curr_pid*16+9] = 0;	
		SP = userSP;
		ireturn;
	endif;

	alias lseek R7;
	lseek = [OPEN_FILE_TABLE + 4*open_ft_idx + 2];

	if(lseek == MAX_FILE_SIZE) then
		backup;
		R1 = RELEASE_INODE;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		R3 = inode_idx;
		call MOD_0;
		restore;
		
		[RetVal] = -2;	
		[PROCESS_TABLE+curr_pid*16+9] = 0;	
		SP = userSP;
		ireturn;
	endif;
	
	if((lseek%512) == 0 && lseek == [INODE_TABLE + 16*inode_idx + 2]) then	
		alias blockNum R8;
		blockNum = -1;
	
		backup;
		R1 = GET_FREE_BLOCK;
		call MOD_2;
		blockNum = R0;
		restore;
	
		if(blockNum == -1) then
			backup;
			R1 = RELEASE_INODE;
			R2 = [SYSTEM_STATUS_TABLE + 1];
			R3 = inode_idx;
			call MOD_0;
			restore;

			[RetVal] = -2;	
			[PROCESS_TABLE+curr_pid*16+9] = 0;	
			SP = userSP;
			ireturn;
		endif;
		
		[INODE_TABLE + 16*inode_idx + 8 + lseek/512] = blockNum;
	endif;
			
	backup;
	R1 = BUFFERED_WRITE;
	R2 = [INODE_TABLE + 16*inode_idx + 8 + lseek/512];
	R3 = lseek%512;
	R4 = word;
	call MOD_3;
	restore;
	
	if(lseek == [INODE_TABLE + 16*inode_idx + 2]) then
		[INODE_TABLE + 16*inode_idx + 2] = [INODE_TABLE + 16*inode_idx + 2] + 1;
		[ROOT_FILE + 8*inode_idx + 1] = [ROOT_FILE + 8*inode_idx + 1] + 1;
	endif;

	[OPEN_FILE_TABLE + 4*open_ft_idx + 2] = [OPEN_FILE_TABLE + 4*open_ft_idx + 2] + 1;
	
	backup;
	R1 = RELEASE_INODE;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = inode_idx;
	call MOD_0;
	restore;
	
	[RetVal] = 0;	
else
	multipush (R1,R2,R3,R4,R5); 
	R1 = 3;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = word;
	call MOD_4;  
	multipop(R1,R2,R3,R4,R5);
	[RetVal] = 0;
endif;

SP = userSP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

ireturn;
