[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 21;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 - 1;

alias userSP R1;
userSP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];

alias currentPID R2;
currentPID = [SYSTEM_STATUS_TABLE + 1];

alias retaddr R3;
retaddr = [[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512];

if([PROCESS_TABLE + 16*currentPID + 2] != 1 || [PROCESS_TABLE + 16*currentPID + 3] != 1) then          //return -1
  [retaddr] = -1;
  [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
  SP = userSP;
  ireturn;
endif;

backup;
R1 = KILL_ALL;
R2 = [SYSTEM_STATUS_TABLE + 1];
call MOD_1;
restore;

alias itr R4;
itr = 0;
while(itr < 4) do
	if([BUFFER_TABLE + 4*itr + 1] == 1) then
		R1 = DISK_STORE;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		R3 = (71 + itr);
		R4 = [BUFFER_TABLE + 4*itr];
		call MOD_4;
	endif;
	itr = itr + 1;
endwhile;	


alias page_num R5;
alias block_num R6;

//store the memory copy of inode table and user table into disk
page_num = 59;
block_num = 3;
R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = page_num;
R4 = block_num;
call MOD_4;

page_num = 60;
block_num = 4;
R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = page_num;
R4 = block_num;
call MOD_4;

//store the memory copy of disk free list into disk
page_num = 61;
block_num = 2;
R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = page_num;
R4 = block_num;
call MOD_4;

//store the memory copy of root file into disk
page_num = 62;
block_num = 5;
R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = page_num;
R4 = block_num;
call MOD_4;

halt;
