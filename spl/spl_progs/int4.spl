//create and delete sys calls are executed in INT4 having sys call nos 1 and 4

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
alias userSP R1;
userSP = SP;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;	//change to kernel stack

alias syscall R2;
syscall = [[PTBR + 2 * ((userSP - 5) / 512)] * 512 + (userSP - 5) % 512];

alias ret_addr R10;
ret_addr = [PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512;

alias protable R11;
protable = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16; 

//-----------------------------------------CREATE---------------------------------------------------//
if (syscall == 1) then
	[protable + 9] = 1;	//set the mode flag
	
	//get the filename and permission
	alias fileName R3;
	alias permission R4;
	fileName = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];
	permission = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + (userSP - 3) % 512];

	alias i R5;
	i = 0;

	//first checking if file is already present
	while(i<MAX_FILE_NUM) do
		if([INODE_TABLE + i*16 + 1] == fileName) then
			[protable + 9] = 0;	//reset the mode
			[ret_addr] = 0;	//already present
			SP = [protable + 13];	//change to user stack

			ireturn; 
		endif;
		i = i + 1;
	endwhile;

	//file is not present
	alias free_entry R6;
	free_entry = -1;

	i = 0;
	while(i<MAX_FILE_NUM) do
		if([INODE_TABLE + i*16 + 1] == -1) then	//free entry found
			free_entry = i;
			break;
		endif;
		i = i + 1;
	endwhile;

	if(free_entry == -1) then	//no free entry present
		[protable + 9] = 0;	//reset the mode
		[ret_addr] = -1;	//no free entry
		SP = [protable + 13];	//change to user stack

		ireturn;
	endif;

	
	alias userID R7;
	userID = [protable + 3];
	[INODE_TABLE + free_entry*16 + 1] = fileName;
	[INODE_TABLE + free_entry*16 + 2] = 0;	//file size
	[INODE_TABLE + free_entry*16 + 0] = DATA;	//file type
	[INODE_TABLE + free_entry*16 + 3] = userID;//USERID same as process's userID
	[INODE_TABLE + free_entry*16 + 4] = permission;	//permission field

	[ROOT_FILE + free_entry*8 + 0] = fileName;	//file name field
	[ROOT_FILE + free_entry*8 + 1] = 0;	//file size
	[ROOT_FILE + free_entry*8 + 2] = DATA;
	[ROOT_FILE + free_entry*8 + 3] = [USER_TABLE + userID*2 + 0];	//username field from user table
	[ROOT_FILE + free_entry*8 + 4] = permission;

	[protable + 9] = 0;	//reset the mode
	[ret_addr] = 0;	//success
	SP = [protable + 13];	//change to user stack

	ireturn;
endif;

//-----------------------------------------DELETE--------------------------------------------------//

if (syscall == 4) then
		[protable + 9] = 4;	//set the mode flag

		//get the filename to be deleted
		alias fileName R3;
		fileName = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];

		alias idx R4;
		alias i R5;
		idx = -1;
		i = 0;

		//iterate through the inode table entries
		while(i<MAX_FILE_NUM) do
			if([INODE_TABLE + 16*i + 1] == fileName) then
				idx = i;
				break;
			endif;
			i = i + 1;
		endwhile;

		//if file is not present return 0
		if(idx == -1) then
			[protable + 9] = 0;	//reset the mode
			[ret_addr] = 0;	//success
			SP = [protable + 13];	//change to user stack

			ireturn;		
		endif;	

		//if it is not a data file
		if([INODE_TABLE + 16*idx + 0] != DATA) then
			[protable + 9] = 0;	//reset the mode
			[ret_addr] = -1;	//not a data file
			SP = [protable + 13];	//change to user stack

			ireturn;
		endif;

		//check if current user is allowed to delete the file
		alias curr_userID R6;
		curr_userID = [protable + 3];
		if([INODE_TABLE + 16*idx + 4] == 0)	then//if exclusive permission is set
			if([INODE_TABLE + 16*idx + 3] != curr_userID && curr_userID != 1) then
				[protable + 9] = 0;	//reset the mode
				[ret_addr] = -1;//no permission
				SP = [protable + 13];	//change to user stack

				ireturn;	
			endif;
		endif;

		multipush(R1,R2,R3);	
		R1 = ACQUIRE_INODE;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		R3 = idx;	//inode index
		call MOD_0;
		multipop(R1,R2,R3);

		//check the file status table if any process is using the file
		if([FILE_STATUS_TABLE + 4*idx + 1] != -1) then	//some process has opened the file
			//release the lock and return -2
			multipush(R1,R2,R3);	
			R1 = RELEASE_INODE;
			R2 = [SYSTEM_STATUS_TABLE + 1];
			R3 = idx;	//inode index
			call MOD_0;
			multipop(R1,R2,R3);	

			[protable + 9] = 0;	//reset the mode
			[ret_addr] = -2;//file is in use
			SP = [protable + 13];	//change to user stack

			ireturn;

		endif;

		alias block_num R8;
		i = 0;
		while(i<4) do
			block_num = [INODE_TABLE + 16*idx + 8 + i]; 
			if(block_num != -1) then	//if block is present in buffer table and dirty bit is set
				if([BUFFER_TABLE + 4*(block_num%4)] == block_num && [BUFFER_TABLE + 4*(block_num%4) + 1] == 1) then
					[BUFFER_TABLE + 4*(block_num%4) + 1] = 0;
				endif;

				backup;
				R1 = RELEASE_BLOCK;	//free the block
				R2 = block_num;
				R3 = [SYSTEM_STATUS_TABLE+1];
				call MOD_2;
				restore;
			endif;
			i = i + 1;
		endwhile;

		[INODE_TABLE + 16*idx + 1] = -1;	//invalidate the inode table of the file
		[ROOT_FILE + 8*idx + 0] = -1;	//invalidate the root file entry

		backup;
		R1 = RELEASE_INODE;	//unlock the file for other processes
		R2 = [SYSTEM_STATUS_TABLE + 1];
		R3 = idx;
		call MOD_0;
		restore;

		[ret_addr] = 0;	
		[protable + 9] = 0;	
		SP = [protable + 13];

		ireturn;
endif;

SP = [protable + 13];	//change to user stack
ireturn;

